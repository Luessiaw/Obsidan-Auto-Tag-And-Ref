/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

var obsidian = require('obsidian');

function getActiveMarkdownFile(app) {
  var activeMarkdownFile = app.workspace.getActiveFile();
  // console.log('activeMarkdownFile:',activeMarkdownFile);
  var activeMarkdownFileName = activeMarkdownFile.path;
  // console.log('activeMarkdownFile.path:',activeMarkdownFile.path);
  const basePath = activeMarkdownFile.vault.adapter.basePath;
  // console.log('activeMarkdownFile.vault.adapter.basePath:',activeMarkdownFile.vault.adapter.basePath);
  // activeMarkdownFile = abstractFileToMarkdownTFile(activeMarkdownFile);
  var path = require('path');
  activeMarkdownFile = path.join(basePath,activeMarkdownFileName);
  // console.log("joined path:",activeMarkdownFile);

  if (!activeMarkdownFile) {
      this.logError("could not get current file.");
      return null;
  }
  activeMarkdownFileName = this.app.vault.getAbstractFileByPath(activeMarkdownFileName);
  return [activeMarkdownFile,activeMarkdownFileName];
}

function ifLog(condition){
  if(condition){
    return console.log
  }
  donothing = function(anyargument){}
  return donothing;
}

function getTokenByCurl(text,pos){//获得{}括起来的内容，或没有{}的一个单独的非空字符。从pos位置开始
  const iflog = false;
  var stack = 0;//用栈标记未配对的左括号{的个数。
  var token = "";
  ifLog(iflog)("getTokenByCurl....")
  while(pos<text.length){
    const char = text.at(pos);
    // console.log([token,char,stack])
    token += char;
    pos += 1;
    if (char!="\\"){
      if (char=="{"){
        stack += 1;
      }else if(char=="}"){
        stack -= 1;
      }else if(" \n\t".includes(char)){
        continue
      }
    }else{
      if(pos<text.length){
        token += text.at(pos);
        pos += 1;
      }
    }
    if (!stack){
      break
    }
  }
  ifLog(iflog)("token=",token," pos=",pos)
  return [token,pos];
}

function getTokenBySquare(text,pos){//获得[]括起来的内容作为可选参数。不需要匹配[]
  const iflog = false;
  ifLog(iflog)("getTokenBySquare...")
  var char;
  var token = "";
  while (pos<text.length){
    char = text.at(pos);
    if (" \t\n".includes(char)){
      token += char
      pos += 1;//跳过空白字符
    }else{
      break
    }
  }
  if (char!="["){
    ifLog(iflog)("no token.");
    // return token//没有可选参数
  }else{
    token += "[";
    pos += 1;
    while(pos<text.length){
      if (text.at(pos)=="]"){
        token += "]";
        break
      }
      var [tokenCurl,pos] = getTokenByCurl(text,pos);
      token += tokenCurl;
    }
    pos += 1;
    ifLog(iflog)("token=",token," pos=",pos);
  }
  return [token,pos]
}

const tagOrLabelRegex = /(\\tag)|(\\Label)/g

function splitTexByTagAndLabel(text){//根据text中\tag和\Label的位置获取列表。需要预先删除text中的定义语句。
  const tagsOrLabels = text.matchAll(tagOrLabelRegex);
  var start = 0;
  const textList = [];
  for (let tagOrLabel of tagsOrLabels){
    const regexTex = tagOrLabel[0];
    var pos = tagOrLabel.index + regexTex.length;
    var optionalArg = "";
    var arg = "";
    if (regexTex=="\\tag"){//假如是\tag命令，只需要捕获一个token
      [arg,pos] = getTokenByCurl(text,pos)
    }else{
      [optionalArg,pos] = getTokenBySquare(text,pos);
      [arg,pos] = getTokenByCurl(text,pos);
    }
    const totalArg = optionalArg + arg;
    // console.log("split,optionalArg=",optionalArg)
    const textSlice = {
      text:text.slice(start,pos),
      regexTex:regexTex + totalArg,
      optionalArg:removeSpaceAndSquareBracket(optionalArg),
      arg:removeSpaceAndCurl(arg),
      argChangedTo:"",
      format:getFormat(arg)
    }
    textList.push(textSlice);
    start = pos;
  }
  const post = text.slice(start);
  return [textList,post]
}

function readFile(activeFile){//读取文件获得文本
  var fs = require("fs");
  const filecontent = fs.readFileSync(activeFile,"utf-8");
  return filecontent
}

function removeSpaceAndCurl(string){//去除字符两端的空白字符和花括号
  // console.log(string);
  string = string.replace(/\s*/g,""); // 删除空白字符
  string = string.replace(/^\{|\}$/g,""); // 去除两端的花括号
  return string;
}

function removeSpaceAndSquareBracket(string){//删除两端的空白字符或方括号
  const iflog = false;
  ifLog(iflog)("string=",string)
  // console.log(string)
  string = string.replace(/\s*/g,""); // 删除空白字符
  string = string.replace(/^\[|\]$/g,""); // 去除两端的花括号
  return string;
}

function getFormat(string){
  string = removeSpaceAndCurl(string);
  if (!string){ // 如果字符串为空,则默认格式为数字
    return ["1"];
  }

  if (/[0-9a-zA-Z]/g.test(string)){//判断是否含有数字或字母
    var format = [];
    string = string.replace(/^[^0-9a-zA-Z]*/,"") // 去除开头的非数字或字母
    while (string){
      // console.log(string);
      var match = string.match(/((?:[0-9]+)|(?:[a-z]|[A-Z]))/);//连续的字母当作多段
      if (/[0-9]+/.test(match[1])){
        format.push("1");// 数字
      }else if(/[a-z]/.test(match[1])){
        format.push("a");
      }else{format.push("A")}

      string = string.slice(match.index+match[1].length);
      if (string){
        match = string.match(/^[^0-9a-zA-Z]*/);
        string = string.slice(match.index+match[0].length);
        format.push(match[0]);
      }
    }
  }
  else{ //不含数字和字母,则格式为第一个字符乘以n次
    var format = string.slice(0,1);
  };
  return format;
}

class Formats{ // 自定义类。我不知道如何自定义 Set 的比较函数。（Set中添加列表无法排除列表相同的情形）
  list;

  constructor(filecontentlist){
    this.list = filecontentlist;
    this.numberLevels = new Map();
    this.numberLevels.set("1",["1"]);
    this.numberLevels.set("A",["A"]);
    this.numberLevels.set("a",["a"]);
    //这个Map形如 {"*":1,"1":["1","1","1"],"A":["a","a","b"]} 
    //key 分为非数字或字母的字符，和数字1或小写a或大写A。
    //前者的value是一个整数，表示该种key已经出现了几次。
    //后者的value是一个列表，表示各级的计数。
    // this.freshFileContentList("");
  }

  typeOfFormatChar(char){
    if (/[0-9]+/.test(char)){
      return "1";
    }else if(/[a-z]/.test(char)){ //字母只有一位
      return "a";
    }else if(/[A-Z]/.test(char)){ //大写字母
      return "A";
    }else{//非数字或字母，重复第一个字符
      return char.substring(0,1);
    }
  }

  isNumberOrLetter(char){//判断是否是数字或字母
    const typeofchar = this.typeOfFormatChar(char);
    return (typeofchar && '1aA'.includes(typeofchar))
  }

  addTagChar(typeofchar){//向this.numberLevels添加key
    if (!this.numberLevels.has(typeofchar)){//肯定不是数字或字母，所以不设层级
      this.numberLevels.set(typeofchar,0)
    }
  }

  nextNumber(number,level){//需要递进的一定是数字或字母
    const typeofchar = this.typeOfFormatChar(number);
    const levels = this.numberLevels.get(typeofchar,["1"]);
    if (level>=levels.length){//如果levels的长度不足，则用typeofchar补全。
      levels.concat(Array(level+1-levels.length).fill(typeofchar));
    }
    number = levels[level];
    var nextfunc;
    if (typeofchar=="1"){
      nextfunc = function(){return String(Number(number)+1)};
    }else if (typeofchar=="a"){
      nextfunc = function(){return String.fromCharCode(Math.min(number.charCodeAt()+1,122))};
    }else{
      nextfunc = function(){return String.fromCharCode(Math.min(number.charCodeAt()+1,90))};
    }

    const nextnumber = nextfunc();
    levels[level] = nextnumber;
    return nextnumber;
  }

  copyNumberOrLetter(number,level){
    const typeofchar = this.typeOfFormatChar(number);
    return this.numberLevels.get(typeofchar)[level];
  }

  restartNumberOrLetter(number,level){//重新计数。
    // console.log('restart numbering...')
    const typeofchar = this.typeOfFormatChar(number);
    // console.log("type of char is ",typeofchar);
    this.numberLevels.get(typeofchar)[level] = typeofchar;
    return typeofchar;
  }

  levelOfFomat(format){//判断一个列表共包含几个数字/字母
    var levels = 0;
    for (char of format){
      if (this.isNumberOrLetter(char)){
        levels++;
      }
    }
    return levels
  }

  indexOfNumberOrLetter(tag){//一个列表形的tag,返回数字或字母的索引值
    // console.log("tag is",tag);
    const index = [];
    for (let i in tag){
      if (this.isNumberOrLetter(tag[i])){
        // console.log('i',i);
        index.push(i);
      }
    }
    // console.log("index of numbers or letters is",index);
    return index
  }

  lastSameLevelOfTags(tag1,tag2){//两个列表形的tag,比较最后一个相同的层级。不比较分隔符。
    const index1 = this.indexOfNumberOrLetter(tag1);
    const index2 = this.indexOfNumberOrLetter(tag2);
    // console.log(index1,index2);
    const max = Math.min(index1.length,index2.length);
    var level = -1;
    for (let i=0;i<max;i++){
      const typeofchar1 = this.typeOfFormatChar(tag1[index1[i]]);
      const typeofchar2 = this.typeOfFormatChar(tag2[index2[i]]);
      if (typeofchar1==typeofchar2){
        level++;
      }
    }
    // console.log("last same level of ",tag1," and ",tag2," is ",level);
    return level;
  }

  nextTag(tag,formerTags){//需要比较上一个tag来决定增加的层级。这里的tag已经转化为type了
    const showlog = false;
    if (typeof tag=="string"){//如果是非数字或字母的符号，不需要看层级，直接乘以倍数
      ifLog(showlog)("Type of ",tag," is String.");
      this.addTagChar(tag);//添加tag
      const number = this.numberLevels.get(tag)+1;
      this.numberLevels.set(tag,number)
      const next = tag.repeat(number)
      ifLog(showlog)("nextTag=",next)
      return next;
    }else{
      ifLog(showlog)("Type of ",tag," is List.");
      //tag是列表
      const formerTag = formerTags.at(-1);
      ifLog(showlog)("tag=",tag," formerTag=",formerTag);
      // if (formerTag && formerTag.constructor!=Array){//如果formerTag是非数字或字母的符号，则将其转换为null
      //   ifLog(showlog)(formerTag,"is not array, changed to null.")
      //   formerTag = null;
      // }
      const level = this.lastSameLevelOfTags(tag,formerTag);
      ifLog(showlog)("last same level of ",tag," and ",formerTag," is ",level);
      const index = this.indexOfNumberOrLetter(tag);
      ifLog(showlog)("index of ",tag," is ",index);
      for (let j in index){//j表示层级，i表示在tag中的索引
        const i = index[j]
        // ifLog(showlog)("i=",i," j=",j);
        if (j<level){
          ifLog(showlog)("j=",j,"<level=",level);
          tag[i] = this.copyNumberOrLetter(tag[i],j);
          ifLog(showlog)("tag["+i+"] copied as",tag[i]);
        }else if(j==level){
          ifLog(showlog)("j=",j,"==level=",level);
          tag[i] = this.nextNumber(tag[i],j)
          ifLog(showlog)("tag["+i+"] nexted as",tag[i]);
        }else{
          ifLog(showlog)("j=",j,">level=",level);
          tag[i] = this.restartNumberOrLetter(tag[i],j)
          ifLog(showlog)("tag["+i+"] restarded as",tag[i]);
        }
      }
      formerTags.push(tag);
    }
    ifLog(showlog)('tag is changed to',tag);
    return tag;

    // if (this.#compareTags(tag,formerTag)){//两个tag同类，则只增加tag的最后一级
    //   var i = 0;
    //   for (char of tag.reverse()){
    //     if (this.isNumberOrLetter(char)){//找到最后一级。
    //       break
    //     }
    //     i++;//i标记的是char的位置
    //   }
    //   levels = this.levelOfFomat(tag);
    //   const nextChar = this.nextNumber(this.numberLevels.get(char)[levels]);
    //   this.numberLevels.get(char)[levels] = nextChar;
    //   tag[i] = nextChar;
    //   return tag;
    // }else{//如果两个tag不同类
      
    // }
  }

  tag2Text(tag){//list转化为String
    if (typeof tag=="string"){
      return tag
    }
    return tag.join("")
  }

  freshFileContentList(){
    // console.log("Freshing...")
    const formerTag = [null];
    var freshedfilecontent = "";
    for (let list of this.list){
      // console.log("list:",list)
      var tag = list.format;
      // console.log("tag:",tag);
      tag = this.nextTag(tag,formerTag);
      list.argChangedTo = this.tag2Text(tag);
      // formerTag = tag;
      // console.log(list.optionalArg);
      const regexTextChangedTo = "\\Label["+list.optionalArg+"]{"+list.argChangedTo+"}"
      list.text = list.text.replace(list.regexTex,regexTextChangedTo)
      // console.log("list changed to",list);
      freshedfilecontent += list.text;
    }
    // console.log("formats changed to",this);
    // console.log("Fresed filecontent=",freshedfilecontent);
    return freshedfilecontent;
  }

}

function setRefRule(filecontentlist){//用于更新reference
  const labelMap = new Map();
  const numberMap = new Map();
  for (let list of filecontentlist){
    const arg = list.arg;
    const optionalArg = list.optionalArg;
    const argChangedTo = list.argChangedTo;
    if (arg){
      numberMap.set(arg,argChangedTo)
    }
    if (optionalArg){//\Label[]里的标签也映射为
      labelMap.set(optionalArg,argChangedTo)
    }
  }
  return [labelMap,numberMap];
}

const defLabelText = "$\\newcommand\\Label[2][]{\\tag{#2}}$\n";
const defRefText = "$\\newcommand\\Ref[2][]{(\\mbox{#2})}$\n";

function addRefAndLabelDef(text){//添加\Ref和\Label命令
  for(let defText of [defLabelText,defRefText]){
    if (!text.includes(defText)){
      text = defText + text;
    }  
  }
  return text;
}

function removeRefOrLabelText(text){//删除\Ref和\Label的定义语句
  for(let defText of [defLabelText,defRefText]){
    text = text.replace(defText,"")
  }
  return text;
}

const refRegex = /\\Ref/g

function reRefText(text,labelMap,numberMap){
  const iflog = false;
  ifLog(iflog)("labelMap=",labelMap," numberMap=",numberMap);
  const refs = text.matchAll(refRegex);
  var start = 0;
  const textList = [];
  for (let ref of refs){
    const regexTex = ref[0];
    var pos = ref.index + regexTex.length;
    var optionalArg = "";
    var arg = "";
    var [optionalArg,pos] = getTokenBySquare(text,pos);
    var [arg,pos] = getTokenByCurl(text,pos);
    ifLog(iflog)("reRefText,optionalArg=",optionalArg," arg=",arg);
    const totalRegex = regexTex+optionalArg + arg;//要在去括号和空白前确定totalRegex
    ifLog(iflog)("TotalRegex=",totalRegex);
    optionalArg = removeSpaceAndSquareBracket(optionalArg);
    arg = removeSpaceAndCurl(arg);
    ifLog(iflog)("bracket removed. Optional=",optionalArg," arg=",arg)
    var textSlice = text.slice(start,pos);
    var refChangedTo = "";
    if(optionalArg&&labelMap.has(optionalArg)){//如果设置了标签，就以标签的引用为准
      ifLog(iflog)("use label to change tag")
      refChangedTo = "\\Ref["+optionalArg+"]{"+labelMap.get(optionalArg)+"}"
    }else if (arg&&numberMap.has(arg)){
      ifLog(iflog)("use number to change tag")
      refChangedTo = "\\Ref["+optionalArg+"]{"+numberMap.get(arg)+"}"
    }else{
      ifLog(iflog)("tag not changed.")
      refChangedTo = totalRegex;
    }
    // ifLog(iflog)("totalRex in textSlice:",textSlice.includes(totalRegex))
    ifLog(iflog)(totalRegex,"=>",refChangedTo)
    textSlice = textSlice.replace(totalRegex,refChangedTo)
    textList.push(textSlice);
    start = pos;
  }
  ifLog(iflog)("textList=",textList)
  // const post = ;
  var finalText = textList.join("")+text.slice(start);
  return finalText
}

// async function renumbering(filecontentlist) { //分割完毕后重新编号
//   var setOfFormats = new SetOfFormats();
//   let list = await filecontentlist
//   for (singleText of list){
//     // console.log(singleText.format);
//     setOfFormats.add(singleText.format);
//   }
//   // console.log(setOfFormats);

// }


// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AutoTagAndRefPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var AutoTagAndRefPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("loading plugin");
    await this.loadSettings();
    // const ribbonIconEl = this.addRibbonIcon("dice", "Sample Plugin", (evt) => {
    //   new Notice("HELLO!");
    // });
    // ribbonIconEl.addClass("my-plugin-ribbon-class");
    this.addCommand({
      id: "refresh-tags&refs",
      name: "Refresh Tags and References",
      callback: () => {
        try{
          // console.log("Formula Auot Refreshing...");
          var [activeFile,activeFileName] = getActiveMarkdownFile(this.app);
          // console.log("activeFile:",activeFile);
          var filecontent = readFile(activeFile);
          filecontent = removeRefOrLabelText(filecontent);
          var [filecontentlist,postcontent] = splitTexByTagAndLabel(filecontent);
          // console.log("filecontentlist:",filecontentlist);
          const formats = new Formats(filecontentlist);
          // console.log(formats)
          var freshedFileContent = formats.freshFileContentList();

          freshedFileContent += postcontent;

          const [labelMap,numberMap] = setRefRule(formats.list);
          // console.log("refRuleMap",refRuleMap)

          freshedFileContent = reRefText(freshedFileContent,labelMap,numberMap)

          freshedFileContent = addRefAndLabelDef(freshedFileContent);
          // console.log("file content after add ref:",freshedFileContent);

          // console.log("activeFille",activeFile);
          // console.log("fresed file content:",freshedFileContentList);
          this.app.vault.modify(activeFileName,freshedFileContent)
          new Notice("Auto-Tag & Ref: Done.")
        }catch(err){
          const message = "AutoTagAndRef Error:\n"+err.message;
          new Notice(message)
        }
      }
    });

    // this.addSettingTab(new SampleSettingTab(this.app, this));
    // this.registerDomEvent(document, "click", (evt) => {
    //   console.log("click", evt);
    // });
    // this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
    console.log("unloading plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for my awesome plugin." });
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      console.log("Secret: " + value);
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};

//# sourceMappingURL=data:application/json;base64,
